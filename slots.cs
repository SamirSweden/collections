using System;
using System.Threading;

class Program
{
    static int balance = 1000000;
    static Random random = new Random();
    static string[] symbols = { "üçí", "üçã", "üçä", "üíé", "7Ô∏è‚É£" };

    static void Main()
    {
        Console.OutputEncoding = System.Text.Encoding.UTF8;

        while (true)
        {
            Console.Clear();
            ShowHeader();
            ShowMenu();

            var choice = Console.ReadKey(true).KeyChar;

            switch (choice)
            {
                case '1': PlaySlots(); break;
                case '2': ShowBalance(); break;
                case '3':
                    Console.WriteLine("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                    return;
                default:
                    Console.WriteLine("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                    Thread.Sleep(1000);
                    break;
            }
        }
    }
    static void ShowHeader()
    {
        System.Console.WriteLine("=========================================================");
        Console.WriteLine(   $"= –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç :: Status player              =");
        System.Console.WriteLine("=========================================================");
        Console.WriteLine(@"
            ‚†Ä‚†Ä‚†Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚†±‚¢ï‚††‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢Ü‚¢∏‚¢£‚†Å‚†õ‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢è‚†®‚¢™‚¢´‚£∑‚°ª‚¢Ü‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£Ø‚¢ñ‚†Ü‚†Å‚†Ä‚£∏‚°à‚†â‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚£á‚°î‚°≥‚†Ä‚¢†‚¢ª‚¢≥‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚°á‚£Ø‚£∂‚¢Ñ‚†Ä‚¢¢‚°ª‚£¶‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ø‚†º‚¢∏‚£ã‚†Ä‚†Ä‚°ç‚†ª‚£ø‚£¶‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ü‚°á‚¢∏‚°†‚£ê‚†•‚°ù‚†∂‚†õ‚¢ø‚†ß
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£º‚£ß‚£º‚£∑‚£Å‚£í‚£°‚°¥‚†Ä‚¢∏‚°Ü
‚†Ä‚†Ä‚†Ä‚£™‚†ø‚†ó‚†Ç‚†Ä‚†î‚†ä‚†â‚†â‚†â‚†â‚¢â‚¢¢‚†á            Welcome Back 
‚†Ä‚£†‚†Æ‚°∑‚†∂‚†ø‚†ø‚†≠‚†§‚†§‚£ï‚£≤‚£∂‚£∂‚†æ‚†ã‚†Ä
‚†ä‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
        " , ConsoleColor.Blue);
    }

    static void ShowMenu()
    {
        Console.WriteLine("1 - –ò–≥—Ä–∞—Ç—å");
        Console.WriteLine("2 - –ë–∞–ª–∞–Ω—Å");
        Console.WriteLine("3 - –í—ã—Ö–æ–¥");
        Console.Write("\n@root~> " , ConsoleColor.Cyan);
    }

    static void PlaySlots()
    {
        Console.Clear();
        ShowHeader();

        if (balance <= 0)
        {
            Console.WriteLine("–ù–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –∏–≥—Ä—ã!");
            Console.ReadKey();
            return;
        }

        Console.Write("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: " , ConsoleColor.DarkCyan);
        if (!int.TryParse(Console.ReadLine(), out int bet) || bet <= 0 || bet > balance)
        {
            Console.WriteLine("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞!");
            Thread.Sleep(1000);
            return;
        }

        Console.WriteLine("\n–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã..." , ConsoleColor.DarkGreen);
        
        // –±—É –∫–æ—Ä—Å–∞—Ç–∏—à —É—á—É–Ω –∫–∏—á–∫–∏–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è
        for (int i = 0; i < 5; i++)
        {
            Console.Write("\r");
            Console.Write($"{symbols[random.Next(symbols.Length)]} {symbols[random.Next(symbols.Length)]} {symbols[random.Next(symbols.Length)]}");
            Thread.Sleep(2000);
        }

        // res 
        string a = symbols[random.Next(symbols.Length)];
        string b = symbols[random.Next(symbols.Length)];
        string c = symbols[random.Next(symbols.Length)];

        Console.WriteLine($"\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {a} {b} {c}" , ConsoleColor.DarkRed);

        // proverka butta
        if (a == b && b == c)
        {
            int win = bet * 3;
            balance += win;
            Console.WriteLine($"üéâ –î–ñ–ï–ö–ü–û–¢! –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç!" , ConsoleColor.Cyan);
        }
        else if (a == b || b == c || a == c)
        {
            int win = bet;
            balance += win;
            Console.WriteLine($"üëç –í—ã–∏–≥—Ä—ã—à: {win} –º–æ–Ω–µ—Ç!" , ConsoleColor.DarkYellow);
        }
        else
        {
            balance -= bet;
            Console.WriteLine("üí∏ –ü—Ä–æ–∏–≥—Ä—ã—à" , ConsoleColor.Magenta);
        }

        Console.WriteLine($"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç");
        Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É...");
        Console.ReadKey();
    }

    static void ShowBalance()
    {
        Console.Clear();
        ShowHeader();
        Console.WriteLine($"–£ –≤–∞—Å: {balance} –º–æ–Ω–µ—Ç" , ConsoleColor.DarkBlue);
        
        if (balance > 50)
            Console.WriteLine("–•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!");
        else if (balance > 10)
            Console.WriteLine("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!");
        else
            Console.WriteLine("–û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏!");
        
        Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É...");
        Console.ReadKey();
    }
}
